subset_df[2, 2] <- NA
# Move info in row 3 in column3 to the first row
subset_df[1, 3] <- subset_df[3, 3]
subset_df[3, 3] <- NA
# Move info in row 4 in column4 to the first row
subset_df[1, 4] <- subset_df[4, 4]
subset_df[4, 4] <- NA
#if row 1 in column4 is ==TRUE
if (subset_df[1, 4] == TRUE) {
#move info in row 5 in column5 to the first row and fill old one with NA
subset_df[1, 5] <- subset_df[5, 5]
subset_df[5, 5] <- NA
#move info in row 6 in column6 to the first row
subset_df[1, 6] <- subset_df[6, 6]
subset_df[6, 6] <- NA
}
# Update the original dataframe with the modified subset
combined_data_frame_35[subset_idx, ] <- subset_df
}
#delete rows depending on whether column4== TRUE or FALSE
#if TRUE the following 5 rows are deleted
#if FALSE the following 3 rows are deleted
# Initialize empty list to store indices to remove
indices_to_remove <- c()
for (row in 1:nrow(combined_data_frame_35)) {
if (is.na(combined_data_frame_35[row, "Column4"])) {
# Do nothing for NA values
} else if (combined_data_frame_35[row, "Column4"] == TRUE) {
# Add the following 5 rows to the list of indices to remove
indices_to_remove <- c(indices_to_remove, (row+1):(row+5))
} else if (combined_data_frame_35[row, "Column4"] == FALSE) {
# Add the following 3 rows to the list of indices to remove
indices_to_remove <- c(indices_to_remove, (row+1):(row+3))
}
}
# Remove rows from the data frame
combined_data_frame_35 <- combined_data_frame_35[-indices_to_remove, ]
#if the column 'type' contains anything else than NA, delete that row
target_strings <- c("like", "heart", "wow", "sad", "care", "angry", "haha")
combined_data_frame_35 <- combined_data_frame_35[!grepl(paste(target_strings, collapse = "|"), combined_data_frame_35$type), ]
#merging
#preprocesing n_total_reactions_com and n_total_reactions_post before merging
combined_data_frame_35$n_total_reactions_com[combined_data_frame_35$n_total_reactions_com == 0] <- NA
for (id_value in unique(combined_data_frame_35$ID)) {
# Subset the dataframe for the current ID
subset_idx <- which(combined_data_frame_35$ID == id_value)
subset_df <- combined_data_frame_35[subset_idx, ]
# in the column 'n_total_reactions_post' keep the value in the first row
subset_df$n_total_reactions_post[-1] <- NA
# Update the original dataframe with the modified subset
combined_data_frame_35[subset_idx, ] <- subset_df
}
#Pipe for merging, renaming, deleting and replacing NA's
combined_data_frame_35 <- combined_data_frame_35 %>%
mutate(
authorName = coalesce(Column1, authorName),
authorId = coalesce(Column2, authorId),
text = coalesce(Column3, text),
hasMedia = coalesce(Column4,hasMedia),
mediaUrl = coalesce(Column5, mediaUrl),
count_like = coalesce(count_like_pos, count_like_com),
count_heart = coalesce(count_heart_pos, count_heart_com),
count_haha= coalesce(count_haha_pos, count_haha_com),
count_care = coalesce(count_care_pos, count_care_com),
count_angry = coalesce(count_angry_pos, count_angry_com),
count_sad = coalesce(count_sad_pos, count_sad_com),
count_wow = coalesce(count_wow_pos, count_wow_com),
n_total_reactions = coalesce(n_total_reactions_post, n_total_reactions_com)) %>%
#rename Column6
rename(mediaText = Column6) %>%
#delete columns
select(-Column1, -Column2, -Column3, -Column4, -Column5,
-type, -count, -reactions.totalCount, -reactions.types,
-n_total_reactions_post, -count_like_pos, -count_heart_pos,
-count_haha_pos, -count_care_pos, -count_angry_pos, -count_sad_pos,
-count_wow_pos, -count_like_com, -count_heart_com, -count_haha_com,
-count_care_com, -count_angry_com, -count_sad_com, -count_wow_com,
-n_total_reactions_com)%>%
#in all the count_ columns replace NA with 0
mutate(across(starts_with("count"), ~replace_na(., 0)))
#in n_total_reactions replace NA with 0
combined_data_frame_35$n_total_reactions[is.na(combined_data_frame_35$n_total_reactions)] <- 0
#make main_post column
combined_data_frame_35$main_post <- NA
for (id_value in unique(combined_data_frame_35$ID)) {
# Subset the dataframe for the current ID
subset_idx <- which(combined_data_frame_35$ID == id_value)
subset_df <- combined_data_frame_35[subset_idx, ]
# in the column 'main_post' fill in the first row with 1, and the remaining rows with 0
subset_df$main_post <- ifelse(seq_along(subset_df$main_post) == 1, 1, 0)
# Update the original dataframe with the modified subset
combined_data_frame_35[subset_idx, ] <- subset_df
}
#make week column
for (row in 1:nrow(combined_data_frame_35)) {
date_post <- as.character(combined_data_frame_35$date_post[row])
first_two_digits <- as.numeric(substr(date_post, 1, 2))
last_digit <- as.numeric(substr(date_post, nchar(date_post), nchar(date_post)))
if ((first_two_digits >= 1 & first_two_digits <= 7) & last_digit == 5) {
combined_data_frame_35$week[row] <- 1
} else if ((first_two_digits >= 8 & first_two_digits <= 14) & last_digit == 5) {
combined_data_frame_35$week[row] <- 2
} else if ((first_two_digits >= 15 & first_two_digits <= 21) & last_digit == 5) {
combined_data_frame_35$week[row] <- 3
} else if ((first_two_digits >= 22 & first_two_digits <= 28) & last_digit == 5) {
combined_data_frame_35$week[row] <- 4
} else if (((first_two_digits >= 29 & first_two_digits <= 31) & (last_digit == 5)) |
((first_two_digits >= 1 & first_two_digits <= 4) & (last_digit == 6))) {
combined_data_frame_35$week[row] <- 5
} else if ((first_two_digits >= 5 & first_two_digits <= 11) & last_digit == 6) {
combined_data_frame_35$week[row] <- 6
} else if ((first_two_digits >= 12 & first_two_digits <= 18) & last_digit == 6) {
combined_data_frame_35$week[row] <- 7
} else if ((first_two_digits >= 19 & first_two_digits <= 25) & last_digit == 6) {
combined_data_frame_35$week[row] <- 8
} else if (((first_two_digits >= 26 & first_two_digits <= 31) | (first_two_digits >= 1 & first_two_digits <= 2)) & last_digit == 6) {
combined_data_frame_35$week[row] <- 9
}
}
#make subcomment variable
combined_data_frame_35$subcomment <- NA
for (id_value in unique(combined_data_frame_35$ID)) {
# Subset the dataframe for the current ID
subset_idx <- which(combined_data_frame_35$ID == id_value)
subset_df <- combined_data_frame_35[subset_idx, ]
# if character in the column 'timeLabel' begins with 'Kommentar', assign 0 to subcomment, if it begins with 'Svar' assign 1:
subset_df$subcomment <- ifelse(substr(subset_df$timeLabel, 1, 9) == "Kommentar", 0,
ifelse(substr(subset_df$timeLabel, 1, 4) == "Svar", 1, NA))
# Update the original dataframe with the modified subset
combined_data_frame_35[subset_idx, ] <- subset_df
}
#municupality
#make lists of abbrivations:
from_copenhagen <- list("AnKe",
"AnSm",
"AsAl",
"BeMø",
"ChLu",
"ChRø",
"CiEg",
"ClBu",
"EmMo",
"EmAn",
"FiRu",
"HaNe",
"FrKr",
"GoGu",
"GyHe",
"HaWa",
"HeWa",
"HeBo",
"HeJø",
"JaNæ",
"JeTh",
"JoJe",
"KaBe",
"KaMa",
"KaAh",
"KaHa",
"KaKi",
"KlGo",
"KnNi",
"LaWe",
"LeFr",
"LiBa",
"LiEr",
"LoTh",
"MaVe",
"MaKa",
"TrJa",
"MiNy",
"MiSk",
"MoMe",
"OlOl",
"PeBj",
"RaSt",
"SiDe",
"SiWe",
"SoSe",
"StTo",
"YiAk",
"YiYi",
"SoHæ",
"LaRo",
"KlMy",
"BiHo",
"JeLü",
"NiPe")
from_aarhus <- list("ThMe",
"NiBa",
"AnWi",
"ChBu",
"ThHa",
"HeAr",
"AnPo",
"ChBa",
"GeBj",
"JaSø",
"JaCh",
"LiGr",
"SeKa",
"MaYu",
"PeSp",
"StWi",
"SoMu",
"BüSi",
"MeSk",
"PoBa",
"RaAz",
"HüAr",
"JeKj",
"AaPe",
"JaBu",
"MeAy",
"EvMe",
"MaHj",
"MeBj",
"LoHi",
"KaNi")
# Loop through each row
for (row in 1:nrow(combined_data_frame_35)) {
# Check if name_abbreviation is in the list from_copenhagen
if (combined_data_frame_35$name_abbreviation[row] %in% from_copenhagen) {
combined_data_frame_35$municipality[row] <- "copenhagen"
}
# Check if name_abbreviation is in the list from_aarhus
if (combined_data_frame_35$name_abbreviation[row] %in% from_aarhus) {
combined_data_frame_35$municipality[row] <- "aarhus"
}
# If name_abbreviation is not in either list, assign NA
if (!(combined_data_frame_35$name_abbreviation[row] %in% c(from_copenhagen, from_aarhus))) {
combined_data_frame_35$municipality[row] <- NA
}
}
#group
for (row in 1:nrow(combined_data_frame_35)) {
# Check conditions and assign values to the 'group' column
if (combined_data_frame_35$name_abbreviation[row] == 'BüSi' &
combined_data_frame_35$week[row] %in% c(1, 5, 7, 8)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'MeSk' &
combined_data_frame_35$week[row] %in% c(2, 4, 5, 8)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'PoBa' &
combined_data_frame_35$week[row] %in% c(1, 4, 5, 7)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'SoHæ' &
combined_data_frame_35$week[row] %in% c(2, 3, 7, 8)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'LaRo' &
combined_data_frame_35$week[row] %in% c(1, 3, 6, 7)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'RaAz' &
combined_data_frame_35$week[row] %in% c(1, 2, 3, 6)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'KlMy' &
combined_data_frame_35$week[row] %in% c(1, 2, 5, 6)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'HüAr' &
combined_data_frame_35$week[row] %in% c(3, 5, 7, 8)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'JeKj' &
combined_data_frame_35$week[row] %in% c(1, 5, 6, 7)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'AaPe' &
combined_data_frame_35$week[row] %in% c(1, 3, 4, 7)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'JaBu' &
combined_data_frame_35$week[row] %in% c(5, 6, 7, 8)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'BiHo' &
combined_data_frame_35$week[row] %in% c(1, 2, 3, 4)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'MeAy' &
combined_data_frame_35$week[row] %in% c(1, 3, 4, 5)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'EvMe' &
combined_data_frame_35$week[row] %in% c(2, 3, 4, 7)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'JeLü' &
combined_data_frame_35$week[row] %in% c(1, 3, 7, 8)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'MaHj' &
combined_data_frame_35$week[row] %in% c(1, 2, 5, 8)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'MeBj' &
combined_data_frame_35$week[row] %in% c(2, 3, 4, 5)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'LoHi' &
combined_data_frame_35$week[row] %in% c(1, 2, 5, 6)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'NiPe' &
combined_data_frame_35$week[row] %in% c(1, 2, 3, 8)) {
combined_data_frame_35$group[row] <- 'treatment' }
else if (combined_data_frame_35$name_abbreviation[row] == 'KaNi' &
combined_data_frame_35$week[row] %in% c(1, 3, 4, 5)) {
combined_data_frame_35$group[row] <- 'treatment' }
else {
combined_data_frame_35$group[row] <- 'control'}
}
View(combined_data_frame_35)
#Load in the files from the  folder:
files <- list.files(path="/Users/idahelenedencker/Desktop/STANDBY/Facebook_Field_2023-kopi/data/preprocessed/first_round_json", pattern="*.json", full.names=TRUE, recursive=FALSE)
# Initialize an empty data frame to hold the combined data
data_frame_all <- NULL
# Initialize an ID counter
id_counter <- 1
# for-loop going through each element in files
for(i in 1:length(files)) {
# Read in json file as list
list <- jsonlite::fromJSON(here::here(files[i]))
# Make a new list making everything in 'list' into dataframes
new_list <- lapply(list, as.data.frame.list)
# Takes the list of data frames new_list, combines them row-wise, fill with NA, and make a dataframe
data_frame <- rbindlist(new_list, fill=TRUE) %>%
as.data.frame()
# Rename the first 6 columns
colnames(data_frame)[1:6] <- c("Column1", "Column2", "Column3", "Column4", "Column5", "Column6")
# Add an ID column
data_frame$ID <- id_counter
# Increment ID counter for the next data frame
id_counter <- id_counter + 1
#Add file_name column
data_frame$file_name <- files[i]
# Combine into dataframe
data_frame_all <- rbindlist(list(data_frame, data_frame_all), fill = TRUE)
}
# for-loop going through each element in files
for(i in 1:length(files)) {
# Read in json file as list
list <- jsonlite::fromJSON(here::here(txt=files[i]))
# Make a new list making everything in 'list' into dataframes
#new_list <- lapply(list, as.data.frame.list)
# Takes the list of data frames new_list, combines them row-wise, fill with NA, and make a dataframe
#data_frame <- rbindlist(new_list, fill=TRUE) %>%
#as.data.frame()
# Rename the first 6 columns
#colnames(data_frame)[1:6] <- c("Column1", "Column2", "Column3", "Column4", "Column5", "Column6")
# Add an ID column
#data_frame$ID <- id_counter
# Increment ID counter for the next data frame
#id_counter <- id_counter + 1
#Add file_name column
#data_frame$file_name <- files[i]
# Combine into dataframe
#data_frame_all <- rbindlist(list(data_frame, data_frame_all), fill = TRUE)
}
View(list)
# for-loop going through each element in files
for(i in 1:length(files)) {
# Read in json file as list
list <- jsonlite::fromJSON(here::here(txt=files[i]))
# Make a new list making everything in 'list' into dataframes
new_list <- lapply(list, as.data.frame.list)
# Takes the list of data frames new_list, combines them row-wise, fill with NA, and make a dataframe
#data_frame <- rbindlist(new_list, fill=TRUE) %>%
#as.data.frame()
# Rename the first 6 columns
#colnames(data_frame)[1:6] <- c("Column1", "Column2", "Column3", "Column4", "Column5", "Column6")
# Add an ID column
#data_frame$ID <- id_counter
# Increment ID counter for the next data frame
#id_counter <- id_counter + 1
#Add file_name column
#data_frame$file_name <- files[i]
# Combine into dataframe
#data_frame_all <- rbindlist(list(data_frame, data_frame_all), fill = TRUE)
}
View(new_list)
# for-loop going through each element in files
for(i in 1:length(files)) {
# Read in json file as list
list <- jsonlite::fromJSON(here::here(txt=files[i]))
# Make a new list making everything in 'list' into dataframes
new_list <- lapply(list, as.data.frame.list)
# Takes the list of data frames new_list, combines them row-wise, fill with NA, and make a dataframe
data_frame <- rbindlist(new_list, fill=TRUE) %>%
as.data.frame()
# Rename the first 6 columns
#colnames(data_frame)[1:6] <- c("Column1", "Column2", "Column3", "Column4", "Column5", "Column6")
# Add an ID column
#data_frame$ID <- id_counter
# Increment ID counter for the next data frame
#id_counter <- id_counter + 1
#Add file_name column
#data_frame$file_name <- files[i]
# Combine into dataframe
#data_frame_all <- rbindlist(list(data_frame, data_frame_all), fill = TRUE)
}
View(data_frame)
# for-loop going through each element in files
for(i in 1:length(files)) {
# Read in json file as list
list <- jsonlite::fromJSON(here::here(txt=files[i]))
# Make a new list making everything in 'list' into dataframes
new_list <- lapply(list, as.data.frame.list)
# Takes the list of data frames new_list, combines them row-wise, fill with NA, and make a dataframe
data_frame <- rbindlist(new_list, fill=TRUE) %>%
as.data.frame()
# Rename the first 6 columns
colnames(data_frame)[1:6] <- c("Column1", "Column2", "Column3", "Column4", "Column5", "Column6")
# Add an ID column
#data_frame$ID <- id_counter
# Increment ID counter for the next data frame
#id_counter <- id_counter + 1
#Add file_name column
#data_frame$file_name <- files[i]
# Combine into dataframe
#data_frame_all <- rbindlist(list(data_frame, data_frame_all), fill = TRUE)
}
# for-loop going through each element in files
for(i in 1:length(files)) {
# Read in json file as list
list <- jsonlite::fromJSON(here::here(txt=files[i]))
# Make a new list making everything in 'list' into dataframes
new_list <- lapply(list, as.data.frame.list)
# Takes the list of data frames new_list, combines them row-wise, fill with NA, and make a dataframe
data_frame <- rbindlist(new_list, fill=TRUE) %>%
as.data.frame()
# Rename the first 6 columns
#colnames(data_frame)[1:6] <- c("Column1", "Column2", "Column3", "Column4", "Column5", "Column6")
# Add an ID column
data_frame$ID <- id_counter
# Increment ID counter for the next data frame
#id_counter <- id_counter + 1
#Add file_name column
#data_frame$file_name <- files[i]
# Combine into dataframe
#data_frame_all <- rbindlist(list(data_frame, data_frame_all), fill = TRUE)
}
View(data_frame)
#Load in the files from the  folder:
files <- list.files(path="/Users/idahelenedencker/Desktop/STANDBY/Facebook_Field_2023-kopi/data/preprocessed/first_round_json", pattern="*.json", full.names=TRUE, recursive=FALSE)
# Initialize an empty data frame to hold the combined data
data_frame_all <- NULL
# Initialize an ID counter
id_counter <- 1
# for-loop going through each element in files
for(i in 1:length(files)) {
# Read in json file as list
list <- jsonlite::fromJSON(here::here(txt=files[i]))
# Make a new list making everything in 'list' into dataframes
new_list <- lapply(list, as.data.frame.list)
# Takes the list of data frames new_list, combines them row-wise, fill with NA, and make a dataframe
data_frame <- rbindlist(new_list, fill=TRUE) %>%
as.data.frame()
# Rename the first 6 columns
#colnames(data_frame)[1:6] <- c("Column1", "Column2", "Column3", "Column4", "Column5", "Column6")
# Add an ID column
data_frame$ID <- id_counter
# Increment ID counter for the next data frame
id_counter <- id_counter + 1
#Add file_name column
#data_frame$file_name <- files[i]
# Combine into dataframe
#data_frame_all <- rbindlist(list(data_frame, data_frame_all), fill = TRUE)
}
View(data_frame)
#Load in the files from the  folder:
files <- list.files(path="/Users/idahelenedencker/Desktop/STANDBY/Facebook_Field_2023-kopi/data/preprocessed/first_round_json", pattern="*.json", full.names=TRUE, recursive=FALSE)
# Initialize an empty data frame to hold the combined data
data_frame_all <- NULL
# Initialize an ID counter
id_counter <- 1
# for-loop going through each element in files
for(i in 1:length(files)) {
# Read in json file as list
list <- jsonlite::fromJSON(here::here(txt=files[i]))
# Make a new list making everything in 'list' into dataframes
new_list <- lapply(list, as.data.frame.list)
# Takes the list of data frames new_list, combines them row-wise, fill with NA, and make a dataframe
data_frame <- rbindlist(new_list, fill=TRUE) %>%
as.data.frame()
# Rename the first 6 columns
#colnames(data_frame)[1:6] <- c("Column1", "Column2", "Column3", "Column4", "Column5", "Column6")
# Add an ID column
data_frame$ID <- id_counter
# Increment ID counter for the next data frame
id_counter <- id_counter + 1
#Add file_name column
data_frame$file_name <- files[i]
# Combine into dataframe
#data_frame_all <- rbindlist(list(data_frame, data_frame_all), fill = TRUE)
}
View(data_frame)
#Load in the files from the  folder:
files <- list.files(path="/Users/idahelenedencker/Desktop/STANDBY/Facebook_Field_2023-kopi/data/preprocessed/first_round_json", pattern="*.json", full.names=TRUE, recursive=FALSE)
# Initialize an empty data frame to hold the combined data
data_frame_all <- NULL
# Initialize an ID counter
id_counter <- 1
# for-loop going through each element in files
for(i in 1:length(files)) {
# Read in json file as list
list <- jsonlite::fromJSON(here::here(txt=files[i]))
# Make a new list making everything in 'list' into dataframes
new_list <- lapply(list, as.data.frame.list)
# Takes the list of data frames new_list, combines them row-wise, fill with NA, and make a dataframe
data_frame <- rbindlist(new_list, fill=TRUE) %>%
as.data.frame()
# Rename the first 6 columns
#colnames(data_frame)[1:6] <- c("Column1", "Column2", "Column3", "Column4", "Column5", "Column6")
# Add an ID column
data_frame$ID <- id_counter
# Increment ID counter for the next data frame
id_counter <- id_counter + 1
#Add file_name column
data_frame$file_name <- files[i]
# Combine into dataframe
data_frame_all <- rbindlist(list(data_frame, data_frame_all), fill = TRUE)
}
View(data_frame_all)
