valid_index <- left_index > 0
# Get the left variable if it is a valid index, otherwise assign NA
left_variable <- ifelse(any(valid_index), subset_df$reactions.totalCount[left_index], NA)
# Place the saved value in the corresponding row of count_like_com column
subset_df$count_like_com[like_index] <- left_variable
}
combined_data_frame_35[subset_idx, ] <- subset_df
}
View(combined_data_frame_35)
View(subset_df)
for (id_value in unique(combined_data_frame_35$ID)) {
# Subset the dataframe for the current ID
subset_idx <- which(combined_data_frame_35$ID == id_value)
subset_df <- combined_data_frame_35[subset_idx, ]
# Check if each reaction type exists in the column 'reactions.types'
reaction_types <- c("like", "heart", "haha", "care", "angry", "sad", "wow")
for (reaction_type in reaction_types) {
if (reaction_type %in% subset_df$reactions.types) {
# Find the indices of the cell containing the reaction type
reaction_indices <- which(subset_df$reactions.types == reaction_type)
# Iterate over each index and assign the left variable to the corresponding column and row
for (reaction_index in reaction_indices) {
# Get the index of the value to the left of the cell containing the reaction type
left_index <- reaction_index - 1
# Check if the left index is valid (not out of bounds)
if (left_index > 0) {
# Get the left variable
left_variable <- subset_df$reactions.totalCount[left_index]
# Place the saved value in the corresponding column and row
column_name <- paste0("count_", reaction_type, "_com")
subset_df[column_name][reaction_index] <- left_variable
} else {
# If left_index is out of bounds, assign NA
column_name <- paste0("count_", reaction_type, "_com")
subset_df[column_name][reaction_index] <- NA
}
}
}
}
# Update the original dataframe with the modified subset
combined_data_frame_35[subset_idx, ] <- subset_df
}
#in
combined_data_frame_35$file_name <- sub("/Users/idahelenedencker/Desktop/STANDBY/Facebook_Field_2023-kopi/data/test_data_35_files", / , combined_data_frame_35$file_name)
#in
combined_data_frame_35$file_name <- sub("/Users/idahelenedencker/Desktop/STANDBY/Facebook_Field_2023-kopi/data/test_data_35_files", "" , combined_data_frame_35$file_name)
View(combined_data_frame_35)
#in
combined_data_frame_35$file_name <- sub("/Users/idahelenedencker/Desktop/STANDBY/Facebook_Field_2023-kopi/data/test_data_35_files/", "" , combined_data_frame_35$file_name)
View(combined_data_frame_35)
#WORKS THE WAY I WANT!
files <- list.files(path="/Users/idahelenedencker/Desktop/STANDBY/Facebook_Field_2023-kopi/data/test_data_35_files", pattern="*.json", full.names=TRUE, recursive=FALSE)
# Initialize an empty data frame to hold the combined data
combined_data_frame_35 <- NULL
# Initialize an ID counter
id_counter <- 1
# for-loop going through each element in files
for(i in 1:length(files)) {
# Read in json file as list
list <- jsonlite::fromJSON(here::here(files[i]))
# Make a new list making everything in 'list' into dataframes
new_list <- lapply(list, as.data.frame.list)
# Takes the list of data frames new_list, combines them row-wise, fill with NA, and make a dataframe
data_frame <- rbindlist(new_list, fill=TRUE) %>%
as.data.frame()
# Rename the first 6 columns
colnames(data_frame)[1:6] <- c("Column1", "Column2", "Column3", "Column4", "Column5", "Column6")
# Add an ID column
data_frame$ID <- id_counter
# Increment ID counter for the next data frame
id_counter <- id_counter + 1
#Add file_name column
data_frame$file_name <- files[i]
# Combine into dataframe
combined_data_frame_35 <- rbindlist(list(data_frame, combined_data_frame_35), fill = TRUE)
}
#Fixing Column5 and Column6 for the ID's where Column4 (HasMedia) == FALSE i.e. transferring reactions and counts to their correct places:
# Loop through each unique ID in the dataframe
for (id_value in unique(combined_data_frame_35$ID)) {
# Subset the dataframe for the current ID
subset_idx <- which(combined_data_frame_35$ID == id_value)
subset_df <- combined_data_frame_35[subset_idx, ]
# Check if the 4th cell in the 'Column4' column is FALSE
if (subset_df[4, "Column4"] == FALSE) {
# Save the values of the 5th cell in 'Column5' and 'Column6'
cell_value_1 <- subset_df[5, "Column5"]
cell_value_2 <- subset_df[5, "Column6"]
# Set the original cells to NA
subset_df[5, c("Column5", "Column6")] <- NA
# Place the saved values in the 'type' and 'count' columns
subset_df[5, "type"] <- cell_value_1
subset_df[5, "count"] <- cell_value_2
# Check if a 6th row exists and it's not NA
if (!is.na(subset_df[6, "Column5"]) && !is.na(subset_df[6, "Column6"])) {
# Save the values of the 6th cell in 'Column5' and 'Column6'
cell_value_3 <- subset_df[6, "Column5"]
cell_value_4 <- subset_df[6, "Column6"]
# Set the original cells to NA
subset_df[6, c("Column5", "Column6")] <- NA
# Place the saved values in the 'type' and 'count' columns
subset_df[6, "type"] <- cell_value_3
subset_df[6, "count"] <- cell_value_4
}
# Check if a 7th row exists and it's not NA
if (!is.na(subset_df[7, "Column5"]) && !is.na(subset_df[7, "Column6"])) {
# Save the values of the 7th cell in 'Column5' and 'Column6'
cell_value_5 <- subset_df[7, "Column5"]
cell_value_6 <- subset_df[7, "Column6"]
# Set the original cells to NA
subset_df[7, c("Column5", "Column6")] <- NA
# Place the saved values in the 'type' and 'count' columns
subset_df[7, "type"] <- cell_value_5
subset_df[7, "count"] <- cell_value_6
}
# Check if a 8th row exists and it's not NA
if (!is.na(subset_df[8, "Column5"]) && !is.na(subset_df[8, "Column6"])) {
# Save the values of the 8th cell in 'Column5' and 'Column6'
cell_value_7 <- subset_df[8, "Column5"]
cell_value_8 <- subset_df[8, "Column6"]
# Set the original cells to NA
subset_df[8, c("Column5", "Column6")] <- NA
# Place the saved values in the 'type' and 'count' columns
subset_df[8, "type"] <- cell_value_7
subset_df[8, "count"] <- cell_value_8
}
# Check if a 9th row exists and it's not NA
if (!is.na(subset_df[9, "Column5"]) && !is.na(subset_df[9, "Column6"])) {
# Save the values of the 9th cell in 'Column5' and 'Column6'
cell_value_9 <- subset_df[9, "Column5"]
cell_value_10 <- subset_df[9, "Column6"]
# Set the original cells to NA
subset_df[9, c("Column5", "Column6")] <- NA
# Place the saved values in the 'type' and 'count' columns
subset_df[9, "type"] <- cell_value_9
subset_df[9, "count"] <- cell_value_10
}
# Check if a 10th row exists and it's not NA
if (!is.na(subset_df[10, "Column5"]) && !is.na(subset_df[10, "Column6"])) {
# Save the values of the 10th cell in 'Column5' and 'Column6'
cell_value_11 <- subset_df[10, "Column5"]
cell_value_12 <- subset_df[10, "Column6"]
# Set the original cells to NA
subset_df[10, c("Column5", "Column6")] <- NA
# Place the saved values in the 'type' and 'count' columns
subset_df[10, "type"] <- cell_value_11
subset_df[10, "count"] <- cell_value_12
}
# Check if a 11th row exists and it's not NA
if (!is.na(subset_df[11, "Column5"]) && !is.na(subset_df[11, "Column6"])) {
# Save the values of the 11th cell in 'Column5' and 'Column6'
cell_value_13 <- subset_df[11, "Column5"]
cell_value_14 <- subset_df[11, "Column6"]
# Set the original cells to NA
subset_df[11, c("Column5", "Column6")] <- NA
# Place the saved values in the 'type' and 'count' columns
subset_df[11, "type"] <- cell_value_13
subset_df[11, "count"] <- cell_value_14
}
# Update the original dataframe with the modified subset
combined_data_frame_35[subset_idx, ] <- subset_df
}
}
#Creating total_n_comments
combined_data_frame_35 <- combined_data_frame_35 %>%
group_by(ID) %>%
mutate(total_n_comments = sum(!is.na(id))) %>%
ungroup()  # Ungroup the data
#creating has_comments
combined_data_frame_35$has_comments <- 0  # Initialize the column with 0
for (i in 1:nrow(combined_data_frame_35)) {
if (combined_data_frame_35$total_n_comments[i] < 1)
combined_data_frame_35$has_comments[i] <- 0
else
combined_data_frame_35$has_comments[i] <- 1
}
#Creating n_total_reactions_post
combined_data_frame_35 <- combined_data_frame_35 %>%
group_by(ID) %>%
mutate(count= as.numeric(count)) %>%
mutate(n_total_reactions_post = sum(count,na.rm=TRUE)) %>%
ungroup()  # Ungroup the data
#Make new columns to be filled
combined_data_frame_35$count_like_pos	<- NA
combined_data_frame_35$count_heart_pos <- NA
combined_data_frame_35$count_haha_pos <- NA
combined_data_frame_35$count_care_pos <- NA
combined_data_frame_35$count_angry_pos <- NA
combined_data_frame_35$count_sad_pos <- NA
combined_data_frame_35$count_wow_pos <- NA
#fill columns based on conditions
for (id_value in unique(combined_data_frame_35$ID)) {
# Subset the dataframe for the current ID
subset_idx <- which(combined_data_frame_35$ID == id_value)
subset_df <- combined_data_frame_35[subset_idx, ]
# Check if the word 'like' exists in the column 'type'
if ("like" %in% subset_df$type) {
# Find the index of the cell containing 'like'
like_index <- which(subset_df$type == "like")
# Get the value to the right of the cell containing 'like'
like_variable <- subset_df$count[like_index]
# Place the saved values in the first row of the count_like_pos column
subset_df$count_like_pos[1] <- like_variable
}
if ("heart" %in% subset_df$type) {
heart_index <- which(subset_df$type == "heart")
heart_variable <- subset_df$count[heart_index]
subset_df$count_heart_pos[1] <- heart_variable
}
if ("haha" %in% subset_df$type) {
haha_index <- which(subset_df$type == "haha")
haha_variable <- subset_df$count[haha_index]
subset_df$count_haha_pos[1] <- haha_variable
}
if ("care" %in% subset_df$type) {
care_index <- which(subset_df$type == "care")
care_variable <- subset_df$count[care_index]
subset_df$count_care_pos[1] <- care_variable
}
if ("angry" %in% subset_df$type) {
angry_index <- which(subset_df$type == "angry")
angry_variable <- subset_df$count[angry_index]
subset_df$count_angry_pos[1] <- angry_variable
}
if ("sad" %in% subset_df$type) {
sad_index <- which(subset_df$type == "sad")
sad_variable <- subset_df$count[sad_index]
subset_df$count_sad_pos[1] <- sad_variable
}
if ("wow" %in% subset_df$type) {
wow_index <- which(subset_df$type == "wow")
wow_variable <- subset_df$count[wow_index]
subset_df$count_wow_pos[1] <- wow_variable
}
# Update the original dataframe with the modified subset
combined_data_frame_35[subset_idx, ] <- subset_df
}
#make n_likes_com, n_heart_com etc. on the comments
#Make new columns to be filled
combined_data_frame_35$n_total_reactions_com <- NA
#NEED TO DO THIS
combined_data_frame_35$count_like_com	<- NA
combined_data_frame_35$count_heart_com <- NA
combined_data_frame_35$count_haha_com <- NA
combined_data_frame_35$count_care_com <- NA
combined_data_frame_35$count_angry_com <- NA
combined_data_frame_35$count_sad_com <- NA
combined_data_frame_35$count_wow_com <- NA
#make 'reactions.type' as character
combined_data_frame_35 <- combined_data_frame_35 %>%
mutate(reactions.types= as.character(reactions.types))
# first sub NULL , character(0) , list() with NAs
combined_data_frame_35$reactions.types <- sub("NULL", NA, combined_data_frame_35$reactions.types)
combined_data_frame_35$reactions.types <- sub("list()", NA, combined_data_frame_35$reactions.types)
combined_data_frame_35$reactions.types[combined_data_frame_35$reactions.types == "character(0)"] <- NA
#fill columns based on conditions:
#in
combined_data_frame_35$file_name <- sub("/Users/idahelenedencker/Desktop/STANDBY/Facebook_Field_2023-kopi/data/test_data_35_files/", "" , combined_data_frame_35$file_name)
View(combined_data_frame_35)
f
for (i in 1:nrow(combined_data_frame_35)) {
combined_data_frame_35$data_data_collection[i] <- substr(combined_data_frame_35$file_name, 1, 4)
}
View(combined_data_frame_35)
for (row in 1:nrow(combined_data_frame_35)) {
combined_data_frame_35$data_data_collection[row] <- substr(combined_data_frame_35$file_name, 1, 4)
}
#data_data_collection
for (row in 1:nrow(combined_data_frame_35)) {
combined_data_frame_35$data_data_collection[row] <- substr(combined_data_frame_35$file_name[row], 1, 4)
}
View(combined_data_frame_35)
for (row in 1:nrow(combined_data_frame_35)) {
combined_data_frame_35$date_data_collection[row] <- substr(combined_data_frame_35$file_name[row], 7, 10)
}
View(combined_data_frame_35)
for (row in 1:nrow(combined_data_frame_35)) {
combined_data_frame_35$name_abbreviation[row] <- substr(combined_data_frame_35$file_name[row], 1, 4)
}
for (row in 1:nrow(combined_data_frame_35)) {
combined_data_frame_35$offentlig_privat[row] <- substr(combined_data_frame_35$file_name[row], 5, 5)
}
View(combined_data_frame_35)
#WORKS THE WAY I WANT!
files <- list.files(path="/Users/idahelenedencker/Desktop/STANDBY/Facebook_Field_2023-kopi/data/test_data_35_files", pattern="*.json", full.names=TRUE, recursive=FALSE)
# Initialize an empty data frame to hold the combined data
combined_data_frame_35 <- NULL
# Initialize an ID counter
id_counter <- 1
# for-loop going through each element in files
for(i in 1:length(files)) {
# Read in json file as list
list <- jsonlite::fromJSON(here::here(files[i]))
# Make a new list making everything in 'list' into dataframes
new_list <- lapply(list, as.data.frame.list)
# Takes the list of data frames new_list, combines them row-wise, fill with NA, and make a dataframe
data_frame <- rbindlist(new_list, fill=TRUE) %>%
as.data.frame()
# Rename the first 6 columns
colnames(data_frame)[1:6] <- c("Column1", "Column2", "Column3", "Column4", "Column5", "Column6")
# Add an ID column
data_frame$ID <- id_counter
# Increment ID counter for the next data frame
id_counter <- id_counter + 1
#Add file_name column
data_frame$file_name <- files[i]
# Combine into dataframe
combined_data_frame_35 <- rbindlist(list(data_frame, combined_data_frame_35), fill = TRUE)
}
#Fixing Column5 and Column6 for the ID's where Column4 (HasMedia) == FALSE i.e. transferring reactions and counts to their correct places:
# Loop through each unique ID in the dataframe
for (id_value in unique(combined_data_frame_35$ID)) {
# Subset the dataframe for the current ID
subset_idx <- which(combined_data_frame_35$ID == id_value)
subset_df <- combined_data_frame_35[subset_idx, ]
# Check if the 4th cell in the 'Column4' column is FALSE
if (subset_df[4, "Column4"] == FALSE) {
# Save the values of the 5th cell in 'Column5' and 'Column6'
cell_value_1 <- subset_df[5, "Column5"]
cell_value_2 <- subset_df[5, "Column6"]
# Set the original cells to NA
subset_df[5, c("Column5", "Column6")] <- NA
# Place the saved values in the 'type' and 'count' columns
subset_df[5, "type"] <- cell_value_1
subset_df[5, "count"] <- cell_value_2
# Check if a 6th row exists and it's not NA
if (!is.na(subset_df[6, "Column5"]) && !is.na(subset_df[6, "Column6"])) {
# Save the values of the 6th cell in 'Column5' and 'Column6'
cell_value_3 <- subset_df[6, "Column5"]
cell_value_4 <- subset_df[6, "Column6"]
# Set the original cells to NA
subset_df[6, c("Column5", "Column6")] <- NA
# Place the saved values in the 'type' and 'count' columns
subset_df[6, "type"] <- cell_value_3
subset_df[6, "count"] <- cell_value_4
}
# Check if a 7th row exists and it's not NA
if (!is.na(subset_df[7, "Column5"]) && !is.na(subset_df[7, "Column6"])) {
# Save the values of the 7th cell in 'Column5' and 'Column6'
cell_value_5 <- subset_df[7, "Column5"]
cell_value_6 <- subset_df[7, "Column6"]
# Set the original cells to NA
subset_df[7, c("Column5", "Column6")] <- NA
# Place the saved values in the 'type' and 'count' columns
subset_df[7, "type"] <- cell_value_5
subset_df[7, "count"] <- cell_value_6
}
# Check if a 8th row exists and it's not NA
if (!is.na(subset_df[8, "Column5"]) && !is.na(subset_df[8, "Column6"])) {
# Save the values of the 8th cell in 'Column5' and 'Column6'
cell_value_7 <- subset_df[8, "Column5"]
cell_value_8 <- subset_df[8, "Column6"]
# Set the original cells to NA
subset_df[8, c("Column5", "Column6")] <- NA
# Place the saved values in the 'type' and 'count' columns
subset_df[8, "type"] <- cell_value_7
subset_df[8, "count"] <- cell_value_8
}
# Check if a 9th row exists and it's not NA
if (!is.na(subset_df[9, "Column5"]) && !is.na(subset_df[9, "Column6"])) {
# Save the values of the 9th cell in 'Column5' and 'Column6'
cell_value_9 <- subset_df[9, "Column5"]
cell_value_10 <- subset_df[9, "Column6"]
# Set the original cells to NA
subset_df[9, c("Column5", "Column6")] <- NA
# Place the saved values in the 'type' and 'count' columns
subset_df[9, "type"] <- cell_value_9
subset_df[9, "count"] <- cell_value_10
}
# Check if a 10th row exists and it's not NA
if (!is.na(subset_df[10, "Column5"]) && !is.na(subset_df[10, "Column6"])) {
# Save the values of the 10th cell in 'Column5' and 'Column6'
cell_value_11 <- subset_df[10, "Column5"]
cell_value_12 <- subset_df[10, "Column6"]
# Set the original cells to NA
subset_df[10, c("Column5", "Column6")] <- NA
# Place the saved values in the 'type' and 'count' columns
subset_df[10, "type"] <- cell_value_11
subset_df[10, "count"] <- cell_value_12
}
# Check if a 11th row exists and it's not NA
if (!is.na(subset_df[11, "Column5"]) && !is.na(subset_df[11, "Column6"])) {
# Save the values of the 11th cell in 'Column5' and 'Column6'
cell_value_13 <- subset_df[11, "Column5"]
cell_value_14 <- subset_df[11, "Column6"]
# Set the original cells to NA
subset_df[11, c("Column5", "Column6")] <- NA
# Place the saved values in the 'type' and 'count' columns
subset_df[11, "type"] <- cell_value_13
subset_df[11, "count"] <- cell_value_14
}
# Update the original dataframe with the modified subset
combined_data_frame_35[subset_idx, ] <- subset_df
}
}
#Creating total_n_comments
combined_data_frame_35 <- combined_data_frame_35 %>%
group_by(ID) %>%
mutate(total_n_comments = sum(!is.na(id))) %>%
ungroup()  # Ungroup the data
#creating has_comments
combined_data_frame_35$has_comments <- 0  # Initialize the column with 0
for (i in 1:nrow(combined_data_frame_35)) {
if (combined_data_frame_35$total_n_comments[i] < 1)
combined_data_frame_35$has_comments[i] <- 0
else
combined_data_frame_35$has_comments[i] <- 1
}
#Creating n_total_reactions_post
combined_data_frame_35 <- combined_data_frame_35 %>%
group_by(ID) %>%
mutate(count= as.numeric(count)) %>%
mutate(n_total_reactions_post = sum(count,na.rm=TRUE)) %>%
ungroup()  # Ungroup the data
#Make new columns to be filled
combined_data_frame_35$count_like_pos	<- NA
combined_data_frame_35$count_heart_pos <- NA
combined_data_frame_35$count_haha_pos <- NA
combined_data_frame_35$count_care_pos <- NA
combined_data_frame_35$count_angry_pos <- NA
combined_data_frame_35$count_sad_pos <- NA
combined_data_frame_35$count_wow_pos <- NA
#fill columns based on conditions
for (id_value in unique(combined_data_frame_35$ID)) {
# Subset the dataframe for the current ID
subset_idx <- which(combined_data_frame_35$ID == id_value)
subset_df <- combined_data_frame_35[subset_idx, ]
# Check if the word 'like' exists in the column 'type'
if ("like" %in% subset_df$type) {
# Find the index of the cell containing 'like'
like_index <- which(subset_df$type == "like")
# Get the value to the right of the cell containing 'like'
like_variable <- subset_df$count[like_index]
# Place the saved values in the first row of the count_like_pos column
subset_df$count_like_pos[1] <- like_variable
}
if ("heart" %in% subset_df$type) {
heart_index <- which(subset_df$type == "heart")
heart_variable <- subset_df$count[heart_index]
subset_df$count_heart_pos[1] <- heart_variable
}
if ("haha" %in% subset_df$type) {
haha_index <- which(subset_df$type == "haha")
haha_variable <- subset_df$count[haha_index]
subset_df$count_haha_pos[1] <- haha_variable
}
if ("care" %in% subset_df$type) {
care_index <- which(subset_df$type == "care")
care_variable <- subset_df$count[care_index]
subset_df$count_care_pos[1] <- care_variable
}
if ("angry" %in% subset_df$type) {
angry_index <- which(subset_df$type == "angry")
angry_variable <- subset_df$count[angry_index]
subset_df$count_angry_pos[1] <- angry_variable
}
if ("sad" %in% subset_df$type) {
sad_index <- which(subset_df$type == "sad")
sad_variable <- subset_df$count[sad_index]
subset_df$count_sad_pos[1] <- sad_variable
}
if ("wow" %in% subset_df$type) {
wow_index <- which(subset_df$type == "wow")
wow_variable <- subset_df$count[wow_index]
subset_df$count_wow_pos[1] <- wow_variable
}
# Update the original dataframe with the modified subset
combined_data_frame_35[subset_idx, ] <- subset_df
}
#make n_likes_com, n_heart_com etc. on the comments
#Make new columns to be filled
combined_data_frame_35$n_total_reactions_com <- NA
#NEED TO DO THIS
combined_data_frame_35$count_like_com	<- NA
combined_data_frame_35$count_heart_com <- NA
combined_data_frame_35$count_haha_com <- NA
combined_data_frame_35$count_care_com <- NA
combined_data_frame_35$count_angry_com <- NA
combined_data_frame_35$count_sad_com <- NA
combined_data_frame_35$count_wow_com <- NA
#make 'reactions.type' as character
combined_data_frame_35 <- combined_data_frame_35 %>%
mutate(reactions.types= as.character(reactions.types))
# first sub NULL , character(0) , list() with NAs
combined_data_frame_35$reactions.types <- sub("NULL", NA, combined_data_frame_35$reactions.types)
combined_data_frame_35$reactions.types <- sub("list()", NA, combined_data_frame_35$reactions.types)
combined_data_frame_35$reactions.types[combined_data_frame_35$reactions.types == "character(0)"] <- NA
#fill columns based on conditions:
#shorten the file_name column
combined_data_frame_35$file_name <- sub("/Users/idahelenedencker/Desktop/STANDBY/Facebook_Field_2023-kopi/data/test_data_35_files/", "" , combined_data_frame_35$file_name)
## Based on the file_name column make:
#name_abbreviation
for (row in 1:nrow(combined_data_frame_35)) {
combined_data_frame_35$name_abbreviation[row] <- substr(combined_data_frame_35$file_name[row], 1, 4)
}
#date_data_collection
for (row in 1:nrow(combined_data_frame_35)) {
combined_data_frame_35$date_data_collection[row] <- substr(combined_data_frame_35$file_name[row], 7, 10)
}
#offentlig_privat
for (row in 1:nrow(combined_data_frame_35)) {
combined_data_frame_35$offentlig_privat[row] <- substr(combined_data_frame_35$file_name[row], 5, 5)
}
#Week
View(combined_data_frame_35)
#offentlig_privat
for (row in 1:nrow(combined_data_frame_35)) {
combined_data_frame_35$offentlig_privat[row] <- substr(combined_data_frame_35$file_name[row], 5)
}
#offentlig_privat
for (row in 1:nrow(combined_data_frame_35)) {
combined_data_frame_35$offentlig_privat[row] <- substr(combined_data_frame_35$file_name[row], 5,5)
}
