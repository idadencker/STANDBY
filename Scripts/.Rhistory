"MaYu",
"PeSp",
"StWi",
"SoMu",
"BuSi",
"MeSk",
"PoBa",
"RaAz",
"HuAr",
"JeKj",
"AaPe",
"JaBu",
"MeLi",
"EvMe",
"MaHj",
"MeBj",
"LoHi",
"KaNi",
"MaAg")
# Loop through each row
for (row in 1:nrow(data_frame_all)) {
# Check if name_abbreviation is in the list from_copenhagen
if (data_frame_all$name_abbreviation[row] %in% from_copenhagen) {
data_frame_all$municipality[row] <- "copenhagen"
}
# Check if name_abbreviation is in the list from_aarhus
if (data_frame_all$name_abbreviation[row] %in% from_aarhus) {
data_frame_all$municipality[row] <- "aarhus"
}
# If name_abbreviation is not in either list, assign NA
if (!(data_frame_all$name_abbreviation[row] %in% c(from_copenhagen, from_aarhus))) {
data_frame_all$municipality[row] <- NA
}
}
for (row in 1:nrow(data_frame_all)) {
# Check conditions and assign values to the 'group' column
if (data_frame_all$name_abbreviation[row] == 'BuSi' &
data_frame_all$week[row] %in% c(1, 5, 7, 8)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'MeSk' &
data_frame_all$week[row] %in% c(2, 4, 5, 8)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'PoBa' &
data_frame_all$week[row] %in% c(1, 4, 5, 7)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'SoHæ' &
data_frame_all$week[row] %in% c(2, 3, 7, 8)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'LaRo' &
data_frame_all$week[row] %in% c(1, 3, 6, 7)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'RaAz' &
data_frame_all$week[row] %in% c(1, 2, 3, 6)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'KlMy' &
data_frame_all$week[row] %in% c(1, 2, 5, 6)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'HuAr' &
data_frame_all$week[row] %in% c(3, 5, 7, 8)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'JeKj' &
data_frame_all$week[row] %in% c(1, 5, 6, 7)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'AaPe' &
data_frame_all$week[row] %in% c(1, 3, 4, 7)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'JaBu' &
data_frame_all$week[row] %in% c(5, 6, 7, 8)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'BiHo' &
data_frame_all$week[row] %in% c(1, 2, 3, 4)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'MeLi' &
data_frame_all$week[row] %in% c(1, 3, 4, 5)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'EvMe' &
data_frame_all$week[row] %in% c(2, 3, 4, 7)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'JeLu' &
data_frame_all$week[row] %in% c(1, 3, 7, 8)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'MaHj' &
data_frame_all$week[row] %in% c(1, 2, 5, 8)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'MeBj' &
data_frame_all$week[row] %in% c(2, 3, 4, 5)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'LoHi' &
data_frame_all$week[row] %in% c(1, 2, 5, 6)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'NiPe' &
data_frame_all$week[row] %in% c(1, 2, 3, 8)) {
data_frame_all$group[row] <- 'treatment' }
else if (data_frame_all$name_abbreviation[row] == 'KaNi' &
data_frame_all$week[row] %in% c(1, 3, 4, 5)) {
data_frame_all$group[row] <- 'treatment' }
else {
data_frame_all$group[row] <- 'control'}
}
# investigating:
#count how many treatment post there should be: 203
data_frame_treatment <- data_frame_all%>%
filter(main_post==1) %>%
filter(group=="treatment")
print(data_frame_treatment$file_name) #print all the 203 filenames
#how many politicians are present: is all 20 there?
length(unique(data_frame_treatment$name_abbreviation)) #only 19 politicians, obs: no PoBa files that are treatment exist, so the number 19 is correct
#Searching for how many of the post actually have the comment
data_frame_treatment_w_com <- data_frame_all%>%
filter(group=="treatment")
#when searching 'SIG FRA, ANMELD, STØT OP' = 28 entries (consistent with the number i manually counted going through all files )
#How many entries when searching in the whole dataset
sum(grepl("SIG FRA, ANMELD, STØT OP", data_frame_all$text)) #51 entries
#count number of treatments and control for the 51 entries
data_frame_search_key <- data_frame_all%>%
filter((grepl("SIG FRA, ANMELD, STØT OP", data_frame_all$text)))
table(data_frame_search_key$group, useNA = 'always') #28 treatment, 23 control
#make a compliance (intervention) column: code all the posts containing an intervention comment as treatment, regardless of whether the politician is in a treatment week
#make compliance (intervention) column:
data_frame_all$intervention <- NA
for (id_value in unique(data_frame_all$ID)) {
# Subset the dataframe for the current ID
subset_idx <- which(data_frame_all$ID == id_value)
subset_df <- data_frame_all[subset_idx, ]
# Check if any row in the subset contains the specified string
if (any(grepl("SIG FRA, ANMELD, STØT OP", subset_df$text))) {
# If yes, assign 'yes' to compliance column
subset_df$intervention <- 'yes'
} else {
# If no, assign 'no' to compliance column
subset_df$intervention <- 'no'
}
# Update the original dataframe with the modified subset
data_frame_all[subset_idx, ] <- subset_df
}
#Rearrange columns
#32 columns
data_frame_all <- data_frame_all[, c(2, 3, 27, 15, 17, 16, 18, 28, 31, 32, 30, 5, 6, 12, 4, 7, 29, 8, 9, 11, 1, 10, 14, 13, 26, 19, 20, 21, 22, 23, 24, 25 )]
write.csv(data_frame_all, "/Users/idahelenedencker/Desktop/STANDBY/all_files_final.csv", row.names=FALSE)
data <- read_csv('/Users/idahelenedencker/Desktop/STANDBY/all_files_final.csv',show_col_types = FALSE)
#counts:
#how many posts: 1601
data$main_post <- as.numeric(data$main_post)
sum(data$main_post)
#how many different politicians: 77
unique_counts <- table(data$name_abbreviation) # Count unique occurrences
print(unique_counts) # Print the counts
total_unique <- length(unique(data$name_abbreviation))
print(total_unique)  # Print the total number of unique occurrences
#how many politicians from aarhus: 27
unique_aarhus <- data %>%
filter(municipality == "aarhus") %>%
pull(name_abbreviation) %>%
unique() %>%
length()
print(unique_aarhus) # Print the result
#how many politicians from copenhagen: 50
unique_copenhagen <- data %>%
filter(municipality == "copenhagen") %>%
pull(name_abbreviation) %>%
unique() %>%
length()
print(unique_copenhagen) # Print the result
knitr::opts_chunk$set(echo = TRUE)
```{r}
pacman::p_load(tidyverse, lme4, lmer)
pacman::p_load(tidyverse, lme4, lmer)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lme4, lmer)
pacman::p_load(tidyverse ) #, lme4, lmer)
pacman::p_load(lme4 )
pacman::p_load(lmer )
pacman::p_load(tidyverse, lme4 ) #, lme4, lmer)
sentiment_data <- read_csv('/Users/idahelenedencker/Desktop/STANDBY/vaders_roberta_bert.csv')
#test
model <- lmer(pos_score_roberta ~ roberta_label + (1 | municipality), data=sentiment_data)
model
plot(pos_score_roberta ~ roberta_label, data = sentiment_data, main = "pos_score_roberta ~ roberta_label")
plot(pos_score_roberta ~ neg_score_roberta, data = sentiment_data, main = "pos_score_roberta ~ roberta_label")
View(sentiment_data)
first_model <- glmer(intervention ~ compound + total_n_comments (1 | municipality), data = sentiment_data, family = binomial)
first_model <- glmer(intervention ~ compound + total_n_comments + (1 | municipality), data = sentiment_data, family = binomial)
first_model <- glmer(as.factor(intervention) ~ compound + total_n_comments + (1 | municipality), data = sentiment_data, family = binomial)
summary(basic_model)
summary(first_model)
sentiment_data <- sentiment_data%>%
intervention = as.factor(intervention)
sentiment_data <- sentiment_data%>%
as.factor(intervention)= intervention
sentiment_data <- sentiment_data%>%
mutate(intervention = as.factor(intervention)
first_model <- glmer(as.factor(intervention) ~ compound + total_n_comments + (1 | municipality), data = sentiment_data, family = binomial)
sentiment_data <- sentiment_data%>%
View(sentiment_data)
sentiment_data %>%
sentiment_data <- read_csv('/Users/idahelenedencker/Desktop/STANDBY/vaders_roberta_bert.csv')
pacman::p_load(tidyverse, lme4 )
sentiment_data <- read_csv('/Users/idahelenedencker/Desktop/STANDBY/vaders_roberta_bert.csv')
sentiment_data <- sentiment_data %>%
mutate(
intervention = as.factor(intervention),
)
View(sentiment_data)
sentiment_data <- sentiment_data %>%
mutate(
intervention = as.factor(intervention),
ID = as.factor(ID),
municipality = as.factor(municipality),
name_abbreviation = as.factor(name_abbreviation)
)
View(sentiment_data)
sentiment_data <- read_csv('/Users/idahelenedencker/Desktop/STANDBY/vaders_roberta_bert.csv')
View(sentiment_data)
sentiment_data <- sentiment_data %>%
mutate(
intervention = as.factor(intervention),
ID = as.factor(ID),
municipality = as.factor(municipality),
name_abbreviation = as.factor(name_abbreviation)
)
View(sentiment_data)
level_model<-lmer(intervention ~ compound
+(1+ID||municipality)
+(1+ID|municipality:name_abbreviation),
data=sentiment_data, REML=FALSE)
#
model <- lmer(intervention ~ compound + (1|municipality/name_abbreviation:ID), data = sentiment_data)
#
model <- lmer(intervention ~ compound + (1|municipality/name_abbreviation:ID), data = sentiment_data, REML=FALSE)
sentiment_data <- read_csv('/Users/idahelenedencker/Desktop/STANDBY/vaders_roberta_bert.csv')
sentiment_data <- sentiment_data %>%
mutate(
intervention = as.factor(intervention),
ID = as.character(ID), #make charachter first
ID = as.factor(ID),
municipality = as.factor(municipality),
name_abbreviation = as.factor(name_abbreviation)
)
View(sentiment_data)
sentiment_data <- read_csv('/Users/idahelenedencker/Desktop/STANDBY/vaders_roberta_bert.csv')
View(sentiment_data)
sentiment_data$ID <- as.character(sentiment_data$ID)  # Convert to character before converting to factor
View(sentiment_data)
sentiment_data$ID <- as.factor(sentiment_data$ID)
View(sentiment_data)
sentiment_data <- read_csv('/Users/idahelenedencker/Desktop/STANDBY/vaders_roberta_bert.csv')
sum(is.na(sentiment_data$ID))
which(is.na(sentiment_data$ID))
sentiment_data <- read_csv('/Users/idahelenedencker/Desktop/STANDBY/vaders_roberta_bert.csv')
View(sentiment_data)
sentiment_data$ID <- as.factor(sentiment_data$ID)
View(sentiment_data)
sentiment_data$ID <- as.character(sentiment_data$ID)  # Convert to character before converting to factor
sentiment_data$ID <- as.factor(sentiment_data$ID)
View(sentiment_data)
model_1 <- lmer(intervention ~ compound + (ID|name_abbreviation) +
(1|municipality), REML=T, data=sentiment_data)
sentiment_data <- read_csv('/Users/idahelenedencker/Desktop/STANDBY/vaders_roberta_bert.csv')
n_distinct(sentiment_data$name_abbreviation)
#test
model <- lmer(pos_score_roberta ~ roberta_label + (1 | municipality), data=sentiment_data)
model
#
model <- lmer(intervention ~ compound + (1|municipality/name_abbreviation:ID), data = sentiment_data, REML=FALSE)
str(sentiment_data)
#start by facorising data
?str
sapply(sentiment_data, class)
print(sapply(sentiment_data, class))
pprint(sapply(sentiment_data, class))
sapply(sentiment_data, class)
sentiment_data <- read_csv('/Users/idahelenedencker/Desktop/STANDBY/vaders_roberta_bert.csv')
sapply(sentiment_data, class)
sentiment_data <- sentiment_data %>%
mutate(
intervention = as.factor(intervention),
#ID = as.character(ID), #make charachter first
#ID = as.factor(ID),
municipality = as.factor(municipality),
name_abbreviation = as.factor(name_abbreviation)
)
sapply(sentiment_data, class)
View(sentiment_data)
sentiment_data <- read_csv('/Users/idahelenedencker/Desktop/STANDBY/vaders_roberta_bert.csv')
sapply(sentiment_data, class)
sentiment_data$name_abbreviation <- as.character(sentiment_data$name_abbreviation) |> trimws() |> as.factor()
View(sentiment_data)
# Check if all unique values are the same
if(length(unique_values) == 1) {
print("All values in the column are the same.")
} else {
print("There are multiple unique values in the column.")
}
# Check unique values in your character column
unique_values <- unique(sentiment_data$name_abbreviation)
# Check if all unique values are the same
if(length(unique_values) == 1) {
print("All values in the column are the same.")
} else {
print("There are multiple unique values in the column.")
}
sentiment_data$name_abbreviation <- trimws(sentiment_data$name_abbreviation)
sentiment_data$name_abbreviation <- factor(sentiment_data$name_abbreviation, levels = unique_values)
View(sentiment_data)
sentiment_data <- read_csv('/Users/idahelenedencker/Desktop/STANDBY/vaders_roberta_bert.csv')
View(sentiment_data)
View(sentiment_data)
sentiment_data$name_abbreviation <- gsub("[^[:print:]]", "", sentiment_data$name_abbreviation)
sentiment_data$name_abbreviation <- tolower(sentiment_data$name_abbreviation)
View(sentiment_data)
n_distinct(sentiment_data$name_abbreviation)
sentiment_data$name_abbreviation <- as.factor(sentiment_data$name_abbreviation)
View(sentiment_data)
sentiment_data <- sentiment_data %>%
mutate(
intervention = as.factor(intervention),
#ID = as.character(ID), #make charachter first
#ID = as.factor(ID),
municipality = as.factor(municipality),
name_abbreviation = as.factor(name_abbreviation)
)
View(sentiment_data)
sentiment_data <- sentiment_data %>%
mutate(
intervention = as.factor(intervention),
week = as.factor(week),
#ID = as.character(ID), #make charachter first
#ID = as.factor(ID),
municipality = as.factor(municipality),
name_abbreviation = as.factor(name_abbreviation)
)
View(sentiment_data)
sentiment_data <- read_csv('/Users/idahelenedencker/Desktop/STANDBY/vaders_roberta_bert.csv')
sentiment_data <- sentiment_data %>%
mutate(
intervention = as.factor(intervention),
week = as.factor(week),
#ID = as.character(ID), #make charachter first
#ID = as.factor(ID),
municipality = as.factor(municipality),
name_abbreviation = as.factor(name_abbreviation)
)
View(sentiment_data)
sapply(sentiment_data, levels)
nlevels(sentiment_data$name_abbreviation)
sentiment_data <- read_csv('/Users/idahelenedencker/Desktop/STANDBY/vaders_roberta_bert.csv')
sentiment_data <- read_csv('/Users/idahelenedencker/Desktop/STANDBY/vaders_roberta_bert.csv')
#can check number of distinct values for a column
n_distinct(sentiment_data$name_abbreviation)
#check class of every column
sapply(sentiment_data, class)
#factorize data
# data that cant be 'integer' numbers and have levels are transformed, e.g cant have 7,3 weeks or 1,2 municipality == transformed
sentiment_data <- sentiment_data %>%
mutate(
intervention = as.factor(intervention),
main_post = as.factor(main_post),
week = as.factor(week),
subcomment = as.factor(subcomment),
municipality = as.factor(municipality),
n_post_day,
name_abbreviation = as.factor(name_abbreviation)
)
#check the levels look right
sapply(sentiment_data, levels)
#factorize data
# data that cant be 'integer' numbers and have levels are transformed, e.g cant have 7,3 weeks or 1,2 municipality == transformed
sentiment_data <- sentiment_data %>%
mutate(
intervention = as.factor(intervention),
main_post = as.factor(main_post),
week = as.factor(week),
subcomment = as.factor(subcomment),
municipality = as.factor(municipality),
offentlig_privat = as.factor(offentlig_privat),
n_post_day,
name_abbreviation = as.factor(name_abbreviation)
)
#check the levels look right
sapply(sentiment_data, levels)
#factorize data
# data that cant be 'integer' numbers and have levels are transformed, e.g cant have 7,3 weeks or 1,2 municipality == transformed
sentiment_data <- sentiment_data %>%
mutate(
intervention = as.factor(intervention),
main_post = as.factor(main_post),
week = as.factor(week),
subcomment = as.factor(subcomment),
municipality = as.factor(municipality),
offentlig_privat = as.factor(offentlig_privat),
roberta_label = as.factor(roberta_label),
name_abbreviation = as.factor(name_abbreviation)
)
#check the levels look right
sapply(sentiment_data, levels)
#can check the number of levels
nlevels(sentiment_data$name_abbreviation)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse, lme4)
#load in data
sentiment_data <- read_csv('/Users/idahelenedencker/Desktop/STANDBY/vaders_roberta_bert.csv')
#can check number of distinct values for a column
n_distinct(sentiment_data$name_abbreviation)
# preprocessing the data
#check class of every column
sapply(sentiment_data, class)
#factorize data
# data that cant be 'integer' numbers and have levels are transformed, e.g we can't have 7,3 weeks or 1,2 municipality == transformed
sentiment_data <- sentiment_data %>%
mutate(
intervention = as.factor(intervention),
main_post = as.factor(main_post),
week = as.factor(week),
subcomment = as.factor(subcomment),
municipality = as.factor(municipality),
offentlig_privat = as.factor(offentlig_privat),
roberta_label = as.factor(roberta_label),
name_abbreviation = as.factor(name_abbreviation)
)
#should ID be level??
#check the levels look right
sapply(sentiment_data, levels)
#can check the number of levels for a factor column
nlevels(sentiment_data$name_abbreviation)
#test lme4 is working
model <- lmer(pos_score_roberta ~ roberta_label + (1 | municipality), data=sentiment_data)
model
plot(pos_score_roberta ~ neg_score_roberta, data = sentiment_data, main = "pos_score_roberta ~ neg_score_roberta")
#simple model
simple_model <- glmer(intervention ~ compound + (1| municipality), data = sentiment_data, family = binomial  )
summary(simple_model)
#simple model 2
simple_model_2 <- glmer(intervention ~ compound + (1| name_abbreviation), data = sentiment_data, family = binomial)
#log odds of intervention is predicted by compound score (fixed effect) allowing the model to vary by municipality
summary(simple_model_2)
#First: check level of the outcome variable
levels(sentiment_data$intervention)
#log odds of intervention is predicted by compound score (fixed effect) allowing the model to vary by municipality
summary(simple_model)
![alt text here](/Users/idahelenedencker/Desktop/image)
![alt text here](/Users/idahelenedencker/Desktop/image)
library(ggplot2)
# Assuming 'reduced' is your dataframe
# Plotting positive scores
p1 <- ggplot(reduced, aes(x = intervention, y = pos_score_roberta)) +
geom_bar(stat = "summary", fun = "mean", fill = "skyblue", color = "black") +
labs(title = "Positive") +
theme_minimal()
library(ggplot2)
# Assuming 'reduced' is your dataframe
# Plotting positive scores
p1 <- ggplot(sentiment_data, aes(x = intervention, y = pos_score_roberta)) +
geom_bar(stat = "summary", fun = "mean", fill = "skyblue", color = "black") +
labs(title = "Positive") +
theme_minimal()
# Plotting neutral scores
p2 <- ggplot(sentiment_data, aes(x = intervention, y = neu_score_roberta)) +
geom_bar(stat = "summary", fun = "mean", fill = "lightgreen", color = "black") +
labs(title = "Neutral") +
theme_minimal()
# Plotting negative scores
p3 <- ggplot(sentiment_data, aes(x = intervention, y = neg_score_roberta)) +
geom_bar(stat = "summary", fun = "mean", fill = "salmon", color = "black") +
labs(title = "Negative") +
theme_minimal()
# Plotting compound scores
p4 <- ggplot(sentiment_data, aes(x = intervention, y = compound_roberta)) +
geom_bar(stat = "summary", fun = "mean", fill = "lightgrey", color = "black") +
labs(title = "Compound") +
theme_minimal()
# Combining plots
plot_grid(p1, p2, p3, p4, ncol = 1, align = "v")
library(gridExtra)
library(ggplot2)
library(gridExtra)
# Assuming 'reduced' is your dataframe
# Plotting positive scores
p1 <- ggplot(sentiment_data, aes(x = intervention, y = pos_score_roberta)) +
geom_bar(stat = "summary", fun = "mean", fill = "skyblue", color = "black") +
labs(title = "Positive") +
theme_minimal()
# Plotting neutral scores
p2 <- ggplot(sentiment_data, aes(x = intervention, y = neu_score_roberta)) +
geom_bar(stat = "summary", fun = "mean", fill = "lightgreen", color = "black") +
labs(title = "Neutral") +
theme_minimal()
# Plotting negative scores
p3 <- ggplot(sentiment_data, aes(x = intervention, y = neg_score_roberta)) +
geom_bar(stat = "summary", fun = "mean", fill = "salmon", color = "black") +
labs(title = "Negative") +
theme_minimal()
# Plotting compound scores
p4 <- ggplot(sentiment_data, aes(x = intervention, y = compound_roberta)) +
geom_bar(stat = "summary", fun = "mean", fill = "lightgrey", color = "black") +
labs(title = "Compound") +
theme_minimal()
# Combining plots
plot_grid(p1, p2, p3, p4, ncol = 1, align = "v")
# Combining plots
grid.arrange(p1, p2, p3, p4, ncol = 1)
p4
# Combining plots
grid.arrange(p1, p2, p3, p4, ncol = 2)
#simple model 2
simple_model_2 <- glmer(intervention ~ compound + (1| ID), data = sentiment_data, family = binomial)
#log odds of intervention is predicted by compound score (fixed effect) allowing the model to vary by politician
summary(simple_model_2)
#log odds of intervention is predicted by compound score (fixed effect) allowing the model to vary by municipality
summary(simple_model)
#no mixed effects model
no_mixed_model <- glm(intervention ~ compound,family=binomial(link='logit'),data=sentiment_data)
summary(no_mixed_model)
